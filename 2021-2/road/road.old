#include <bits/stdc++.h>
using namespace std;

#if 0
bool check(vaector loop1, loop2, int cent, int k, cols)

int perebir()


main()

    if (g==1)
        perebir()
    r = f()
#if 0
    if r != perebir()
        cout<"Error !!!"
    if () 
#endif
#endif


static int test(int n, int k, vector<int> &road, vector<int> &cols)
{
    for (int j=2;j<n-2;j++) {
        if (road[0] != road[j+1] && road[0] != road[j]) {
            bool b = true;
            for(int i=0;i<n;i++) {
                if (i!=j &&  road[i] == road[(i+1)%n]) {
                    b = false;
                }
            }
            if (b){
                return j;
            }
        }
    }
    return -1;
}

static void search(bool &b, int n, int x, int k, vector<int> &road, vector<int> &cols)
{
    for (int i = 0; i < k; ++i)
    {
        if (cols[i]>0) {
//            if ((x!=0 && i==road[x-1]) /*&& (x!=n-1 || i!=road[0])*/) {
//                    continue;
//            }
            road[x] = i;
            cols[i]--;
            if (x != n-1) {
                search(b, n, x+1, k, road, cols);
            } else {
//                for (int j=0;j<n;j++) {
//                    cout<<road[j]<<' ';
//                }
//                cout<<endl;
                int z = test(n, k, road, cols);
                if (z!=-1) {
                    cout<<z<<' '<<n-1-z<<endl;
                    for (int j=0;j<n;j++) {
                        if (j<z) {
                            cout<<road[(j+1)%n]+1<<' ';
                        } else {
                            if (j == z) {
                                cout<<endl<<road[0]+1<<endl;
                            } else {
                                cout<<road[(j)%n]+1<<' ';
                            }
                        }
                    }
                    cout<<endl;
                    b = true;
                    return;
                }
            }
            road[x] = -1;
            cols[i]++;
            if (b) {
                return;
            }
        }
    }
}

void test_ver(int k, int n, vector<int> &cols)
{
    vector<int> road(n, -1);
//    for (int i=0;i<k;i++) {
//        cout<<cols[i]<<' ';
//    }
//    cout<<endl;
    bool b = false;
    search(b, n, 0, k, road, cols);
    if (!b) {
        cout<<-1<<endl;
    }
}

int random(int m)
{
    return m*rand()/RAND_MAX;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);


    srand(time(NULL));
    int n, k, g;
#if 1
    cin>>n>>k>>g;;
//    cout<<n<<' '<<k<<endl;

    vector<int> col(n), colst(k, 0);
    vector<vector<int>> cols(k, vector<int>(2));
    for (int i=0;i<k;i++) {
        cols[i] = {i, 0};
    }
    for (int i=0;i<n;i++) {
        cin>>col[i];
        col[i]--;
//        cout<<col[i]<<' ';
        colst[col[i]]++;
        cols[col[i]][1]++;
    }
#endif
#if 0
    n = random(200);
    k = random();
#endif
    vector<int> road(n, -1);
    vector<int> colst1(colst);
    if (g == 2) {
        if (k <= 2) {
            cout<<-1<<endl;
        } else {
            int x;
            for (int i=0;i<k;i++) {
                if (colst[i] == n/2) {
                    x = i;
                    break;
                }
            }
            int y = 0;
            if (x == 0) {y = 1;}
            for (int i=0;i<n;i++) {
                if (i%2== 1) {
                    road[i] = y;
                    colst[y]--;
//                    cout<<'b';
//                    for (int j=0;j<k;j++) {
//                        cout<<colst[j]<<' ';
//                    }
                    while (i<n-2 && colst[y]==0) {
//                        cout<<"y="<<y<<endl;
                        y = (y+1)%k;
                        if (y == x) {
                            y = (y+1)%k;
                        }
                    }
                } else {road[i] = x;}
            }

            if(road[n-1]==road[n-3]) {
                for (int i=0;i<n;++i) {
                    if (road[i]!=road[n-3] && road[i]!=x) {
                        int t = road[i];
                        road[i] = road[n-1];
                        road[n-1] = t;
                    }
                }
            }
            
            //if (road[n-1] != road[n-3]){
                cout<<n-3<<' '<<2<<endl;
                for (int i = 0; i < n-3; ++i)
                {
                    cout<<road[i]+1<<' ';
                }
                cout<<endl<<road[n-3]+1<<endl;
                cout<<road[n-2]+1<<' '<<road[n-1]+1;
//            } else {
//                cout<<n-4<<' '<<3<<endl;
//                for (int i = 0; i < n-4; ++i)
//                {
//                    cout<<road[i]+1<<' ';
//                }
//                cout<<endl<<road[n-4]+1<<endl;
//                cout<<road[n-3]+1<<' '<<road[n-2]+1<<' '<<road[n-1]+1<<endl;
//            }
        }
    } else {
        if (k == 2 ) {
            if (abs(colst[0]-colst[1]) != 1 || n==5) {
                cout<<-1<<endl;
            } else {
                int x= 1, y = 2;
                if (colst[0]<colst[1]) {
                    x = 2;
                    y = 1;
                }
                cout<<n-4<<' '<<3<<endl;
                for (int i=0;i<n-4;++i) {
                    if (i%2==0){
                        cout<<x<<' ';
                    } else {
                        cout<<y<<' ';
                    }
                }
                cout<<endl<<y<<endl<<x<<' '<<y<<' '<<x<<endl;
            }
        } else {
            test_ver(k, n, colst1);
        }
    }
#if 0
//    cout<<endl;
    vector<vector<int>> cols1(cols);
    vector<int> road(n, -1);
    bool b = false;
    for (int i=0;i<k;i++) {
        if (2*cols[i][1]>n+1) {
            b = true;
        }
//        cout<<cols1[i]<<' ';
    }
//    cout<<endl;
    sort(cols.begin(), cols.end(), [](vector<int> a, vector<int> b) {
        return a[1] > b[1];
    });
    int c0 = -1;
    for (int i=0;i<k;i++) {
        if (cols[i][1] == 1) {
            road[n-3] = i;
            c0 = i;
            cols[i][1] = 0;
//            cout<<i<<endl;
            break;
        }
    }
    int pr;
    if (road[n-3] != 0) {
        pr = 0;
    } else {pr = 1;}
//    cout<<'b'<<b<<endl;
    for (int i=0;i<n;i++) {
        if (b) {
            break;
        }
        if (road[i] == -1) {
            road[i] = cols[pr][0];
            cols[pr][1]--;
        } else {
            pr = road[i];
        }
        int p;
        p = cols[pr][0];
        sort(cols.begin(), cols.end(), [](vector<int> &a, vector<int> &b) {
            return a[1] > b[1];
        });
//        for (int j=0;j<k;j++) {
//            cout<<i<<' '<<cols[j][0]<<' '<<cols[j][1]<<endl;
//        }
//        cout<<road[i]<<' ';
        int nw = -1, x = 0;
        while(nw ==-1 && i!=n-1 && (i!=n-4 || road[n-3] == -1)) {
            if (cols[x][0]==p) {
                x = (x+1)%k;
            }
            if ((cols[x][1] != 0) && (!(i == n-4 && cols[x][0]==0) && !(i==n-2 && cols[x][0]==road[n-3]))) {
                nw = x;
            }
            if (x == 0 && nw == -1) {
                b = true;
                break;
            }
            x = (x+1)%k;
            if (x == 0 && nw == -1) {
                b = true;
                break;
            }
        }
        pr = nw;
    }
//    cout<<'b'<<b<<endl;
    for (int i=0;i<k;i++) {
//        cout<<cols1[i];
    }
//    cout<<endl;
    if (b) {
        b = false;
        for (int i=0;i<k;i++) {
            if (2*cols1[i][1]>n+1) {
                b = true;
            }
//            cout<<cols[i]<<' ';
        }
        if (n==5){b=true;}
//        cout<<'b'<<b<<endl;
        sort(cols1.begin(), cols1.end(), [](vector<int> a, vector<int> b) {
            return a[1] > b[1];
        });
        for (int i=0;i<n;i++){
            if (i!= n-4 || c0==-1) {
                road[i] = -1;
            } else {road[i] = road[i+1]; cols1[road[i]][1] = 0;}
        }
        int pr;
        if (road[n-4] != 0) {
            pr = 0;
        } else {pr = 1;}
//        cout<<'b'<<b<<endl;
        for (int i=0;i<n;i++) {
            if (b) {
                break;
            }
            if (road[i] == -1) {
                road[i] = cols1[pr][0];
                cols1[pr][1]--;
            } else {
                pr = road[i];
            }
            int p = cols1[pr][0];
            sort(cols1.begin(), cols1.end(), [](vector<int> a, vector<int> b) {
                return a[1] > b[1];
            });
//            cout<<road[i]<<' ';
            int nw = -1, x = 0;
            while(nw ==-1 && i!=n-1 && (i!=n-5 || road[n-4] == -1)) {
                if (cols1[x][0]==p) {
                    x = (x+1)%k;
                }
                if ((cols1[x][1] != 0) && (!(i == n-5 && cols1[x][0]==0) && !(i==n-2 && cols1[x][0]==road[n-4]))) {
                    nw = x;
                }
                if (x == 0 && nw == -1) {
                    b = true;
                    break;
                }
                x = (x+1)%k;
                if (x == 0 && nw == -1) {
                    b = true;
                    break;
                }
            }
            pr = nw;
        }
        if (b) {
            cout<<-1<<endl;
        } else{
            cout<<n-4<<' '<<3<<endl;
            for (int i=0;i<n-4;i++){
                cout<<road[i]+1<<' ';
            }
            cout<<endl<<road[n-4]+1<<endl;
            cout<<road[n-3]+1<<' '<<road[n-2]+1<<' '<<road[n-1]+1<<endl;
        }
    } else {
        cout<<n-3<<' '<<2<<endl;
        for (int i=0;i<n-3;i++){
            cout<<road[i]+1<<' ';
        }
        cout<<endl<<road[n-3]+1<<endl;
        cout<<road[n-2]+1<<' '<<road[n-1]+1<<endl;
    }
#endif
}
